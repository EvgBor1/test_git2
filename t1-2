Очистка рабочей папки
В некоторых ситуациях лучше не скрывать результаты своего труда или файлы, а избавиться от них. Это можно сделать командой git clean.
Удаление требуется, чтобы убрать мусор, сгенерированный путем слияний или внешними инструментами, или чтобы избавиться от артефактов сборки в процессе ее очистки.
С этой командой нужно быть крайне аккуратным, так как она предназначена для удаления неотслеживаемых файлов из рабочей папки. Даже если вы передумаете, восстановить содержимое таких файлов, как правило, будет невозможно. Безопаснее воспользоваться командой git stash --all, удаляющей из папки все содержимое, но с последующим его сохранением в буфере.
Предположим, вы все-таки хотите удалить командой git clean мусорные файлы или очистить вашу рабочую папку. Для удаления из этой папки всех неотслежива- емых файлов используйте команду git clean -f -d, которая полностью очищает папку, убирая не только файлы, но и вложенные папки. Параметр -f (сокращение от слова force — заставлять) означает принудительное удаление, подчеркивая, что вы действительно хотите это сделать.
Если же вам интересно посмотреть на результаты удаления, используйте пара- метр –n, который говорит системе: «Сымитируй удаление и покажи мне, что будет удалено».
$ git clean -d -n
 Would remove test.o
 Would remove tmp/
По умолчанию команда git clean удаляет только неотслеживаемые файлы, не добавленные в список игнорируемых. Любой файл, имя которого совпадает с ша- блоном в файле .gitignore, сохранится. Чтобы удалить и их, например убрав все генерируемые в процессе сборки файлы с расширением .o с целью полной очистки сборки, добавьте к команде clean параметр -x.
 $ git status -s
  M lib/simplegit.rb
 ?? build.TMP
 ?? tmp/
 $ git clean -n -d
 Would remove build.TMP
 Would remove tmp/
 $ git clean -n -d -x
 Would remove build.TMP
 Would remove test.o
 Would remove tmp/
Если вы точно не знаете, к каким последствиям приведет выполнение коман- ды git clean, всегда добавляйте к ней параметр -n, чтобы посмотреть на резуль- тат перед тем, как указать параметр -f и проводить реальное удаление. Другой способ контроля над процессом дает параметр –i, включающий интерактивный режим.
Вот пример выполнения команды очистки в интерактивном режиме.
 $ git clean -x -i
 Would remove the following items:
   build.TMP test.o
 *** Commands ***
     1: clean 2: filter by pattern 3: select by numbers 4: ask each 5: quit
     6: help
 What now>
Это дает вам возможность по очереди рассмотреть все удаляемые файлы или в ин- терактивном режиме указать шаблон удаления.
